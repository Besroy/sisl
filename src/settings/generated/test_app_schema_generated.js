// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var testapp = testapp || {};

/**
 * @constructor
 */
testapp.DatabaseSettings = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {testapp.DatabaseSettings}
 */
testapp.DatabaseSettings.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {testapp.DatabaseSettings=} obj
 * @returns {testapp.DatabaseSettings}
 */
testapp.DatabaseSettings.getRootAsDatabaseSettings = function(bb, obj) {
  return (obj || new testapp.DatabaseSettings).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
testapp.DatabaseSettings.prototype.databaseHost = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns {number}
 */
testapp.DatabaseSettings.prototype.databasePort = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readUint32(this.bb_pos + offset) : 27017;
};

/**
 * @param {number} value
 * @returns {boolean}
 */
testapp.DatabaseSettings.prototype.mutate_databasePort = function(value) {
  var offset = this.bb.__offset(this.bb_pos, 6);

  if (offset === 0) {
    return false;
  }

  this.bb.writeUint32(this.bb_pos + offset, value);
  return true;
};

/**
 * @returns {number}
 */
testapp.DatabaseSettings.prototype.numThreads = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readUint32(this.bb_pos + offset) : 8;
};

/**
 * @param {number} value
 * @returns {boolean}
 */
testapp.DatabaseSettings.prototype.mutate_numThreads = function(value) {
  var offset = this.bb.__offset(this.bb_pos, 8);

  if (offset === 0) {
    return false;
  }

  this.bb.writeUint32(this.bb_pos + offset, value);
  return true;
};

/**
 * @param {flatbuffers.Builder} builder
 */
testapp.DatabaseSettings.startDatabaseSettings = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} databaseHostOffset
 */
testapp.DatabaseSettings.addDatabaseHost = function(builder, databaseHostOffset) {
  builder.addFieldOffset(0, databaseHostOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} databasePort
 */
testapp.DatabaseSettings.addDatabasePort = function(builder, databasePort) {
  builder.addFieldInt32(1, databasePort, 27017);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numThreads
 */
testapp.DatabaseSettings.addNumThreads = function(builder, numThreads) {
  builder.addFieldInt32(2, numThreads, 8);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
testapp.DatabaseSettings.endDatabaseSettings = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} databaseHostOffset
 * @param {number} databasePort
 * @param {number} numThreads
 * @returns {flatbuffers.Offset}
 */
testapp.DatabaseSettings.createDatabaseSettings = function(builder, databaseHostOffset, databasePort, numThreads) {
  testapp.DatabaseSettings.startDatabaseSettings(builder);
  testapp.DatabaseSettings.addDatabaseHost(builder, databaseHostOffset);
  testapp.DatabaseSettings.addDatabasePort(builder, databasePort);
  testapp.DatabaseSettings.addNumThreads(builder, numThreads);
  return testapp.DatabaseSettings.endDatabaseSettings(builder);
}

/**
 * @constructor
 */
testapp.DBConnection = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {testapp.DBConnection}
 */
testapp.DBConnection.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {testapp.DBConnection=} obj
 * @returns {testapp.DBConnection}
 */
testapp.DBConnection.getRootAsDBConnection = function(bb, obj) {
  return (obj || new testapp.DBConnection).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
testapp.DBConnection.prototype.minDBConnections = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readUint32(this.bb_pos + offset) : 2;
};

/**
 * @param {number} value
 * @returns {boolean}
 */
testapp.DBConnection.prototype.mutate_minDBConnections = function(value) {
  var offset = this.bb.__offset(this.bb_pos, 4);

  if (offset === 0) {
    return false;
  }

  this.bb.writeUint32(this.bb_pos + offset, value);
  return true;
};

/**
 * @returns {number}
 */
testapp.DBConnection.prototype.maxDBConnections = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readUint32(this.bb_pos + offset) : 10;
};

/**
 * @param {number} value
 * @returns {boolean}
 */
testapp.DBConnection.prototype.mutate_maxDBConnections = function(value) {
  var offset = this.bb.__offset(this.bb_pos, 6);

  if (offset === 0) {
    return false;
  }

  this.bb.writeUint32(this.bb_pos + offset, value);
  return true;
};

/**
 * @returns {flatbuffers.Long}
 */
testapp.DBConnection.prototype.dbConnectionOptimalLoad = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readUint64(this.bb_pos + offset) : this.bb.createLong(100, 0);
};

/**
 * @param {flatbuffers.Long} value
 * @returns {boolean}
 */
testapp.DBConnection.prototype.mutate_dbConnectionOptimalLoad = function(value) {
  var offset = this.bb.__offset(this.bb_pos, 8);

  if (offset === 0) {
    return false;
  }

  this.bb.writeUint64(this.bb_pos + offset, value);
  return true;
};

/**
 * @param {flatbuffers.Builder} builder
 */
testapp.DBConnection.startDBConnection = function(builder) {
  builder.startObject(4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} minDBConnections
 */
testapp.DBConnection.addMinDBConnections = function(builder, minDBConnections) {
  builder.addFieldInt32(0, minDBConnections, 2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} maxDBConnections
 */
testapp.DBConnection.addMaxDBConnections = function(builder, maxDBConnections) {
  builder.addFieldInt32(1, maxDBConnections, 10);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Long} dbConnectionOptimalLoad
 */
testapp.DBConnection.addDbConnectionOptimalLoad = function(builder, dbConnectionOptimalLoad) {
  builder.addFieldInt64(2, dbConnectionOptimalLoad, builder.createLong(100, 0));
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
testapp.DBConnection.endDBConnection = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} minDBConnections
 * @param {number} maxDBConnections
 * @param {flatbuffers.Long} dbConnectionOptimalLoad
 * @returns {flatbuffers.Offset}
 */
testapp.DBConnection.createDBConnection = function(builder, minDBConnections, maxDBConnections, dbConnectionOptimalLoad) {
  testapp.DBConnection.startDBConnection(builder);
  testapp.DBConnection.addMinDBConnections(builder, minDBConnections);
  testapp.DBConnection.addMaxDBConnections(builder, maxDBConnections);
  testapp.DBConnection.addDbConnectionOptimalLoad(builder, dbConnectionOptimalLoad);
  return testapp.DBConnection.endDBConnection(builder);
}

/**
 * @constructor
 */
testapp.Glog = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {testapp.Glog}
 */
testapp.Glog.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {testapp.Glog=} obj
 * @returns {testapp.Glog}
 */
testapp.Glog.getRootAsGlog = function(bb, obj) {
  return (obj || new testapp.Glog).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
testapp.Glog.prototype.FLAGSV = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readUint32(this.bb_pos + offset) : 1;
};

/**
 * @param {number} value
 * @returns {boolean}
 */
testapp.Glog.prototype.mutate_FLAGS_v = function(value) {
  var offset = this.bb.__offset(this.bb_pos, 4);

  if (offset === 0) {
    return false;
  }

  this.bb.writeUint32(this.bb_pos + offset, value);
  return true;
};

/**
 * @returns {number}
 */
testapp.Glog.prototype.FLAGSMaxLogSize = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readUint32(this.bb_pos + offset) : 50;
};

/**
 * @param {number} value
 * @returns {boolean}
 */
testapp.Glog.prototype.mutate_FLAGS_max_log_size = function(value) {
  var offset = this.bb.__offset(this.bb_pos, 6);

  if (offset === 0) {
    return false;
  }

  this.bb.writeUint32(this.bb_pos + offset, value);
  return true;
};

/**
 * @returns {number}
 */
testapp.Glog.prototype.FLAGSLogtostderr = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @param {number} value
 * @returns {boolean}
 */
testapp.Glog.prototype.mutate_FLAGS_logtostderr = function(value) {
  var offset = this.bb.__offset(this.bb_pos, 8);

  if (offset === 0) {
    return false;
  }

  this.bb.writeUint32(this.bb_pos + offset, value);
  return true;
};

/**
 * @returns {number}
 */
testapp.Glog.prototype.FLAGSLogbuflevel = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {number} value
 * @returns {boolean}
 */
testapp.Glog.prototype.mutate_FLAGS_logbuflevel = function(value) {
  var offset = this.bb.__offset(this.bb_pos, 10);

  if (offset === 0) {
    return false;
  }

  this.bb.writeInt32(this.bb_pos + offset, value);
  return true;
};

/**
 * @returns {number}
 */
testapp.Glog.prototype.FLAGSStderrthreshold = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 3;
};

/**
 * @param {number} value
 * @returns {boolean}
 */
testapp.Glog.prototype.mutate_FLAGS_stderrthreshold = function(value) {
  var offset = this.bb.__offset(this.bb_pos, 12);

  if (offset === 0) {
    return false;
  }

  this.bb.writeInt32(this.bb_pos + offset, value);
  return true;
};

/**
 * @returns {number}
 */
testapp.Glog.prototype.FLAGSAlsologtostderr = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @param {number} value
 * @returns {boolean}
 */
testapp.Glog.prototype.mutate_FLAGS_alsologtostderr = function(value) {
  var offset = this.bb.__offset(this.bb_pos, 14);

  if (offset === 0) {
    return false;
  }

  this.bb.writeUint32(this.bb_pos + offset, value);
  return true;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
testapp.Glog.prototype.FLAGSVmodule = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 16);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
testapp.Glog.startGlog = function(builder) {
  builder.startObject(7);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} FLAGSV
 */
testapp.Glog.addFLAGSV = function(builder, FLAGSV) {
  builder.addFieldInt32(0, FLAGSV, 1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} FLAGSMaxLogSize
 */
testapp.Glog.addFLAGSMaxLogSize = function(builder, FLAGSMaxLogSize) {
  builder.addFieldInt32(1, FLAGSMaxLogSize, 50);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} FLAGSLogtostderr
 */
testapp.Glog.addFLAGSLogtostderr = function(builder, FLAGSLogtostderr) {
  builder.addFieldInt32(2, FLAGSLogtostderr, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} FLAGSLogbuflevel
 */
testapp.Glog.addFLAGSLogbuflevel = function(builder, FLAGSLogbuflevel) {
  builder.addFieldInt32(3, FLAGSLogbuflevel, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} FLAGSStderrthreshold
 */
testapp.Glog.addFLAGSStderrthreshold = function(builder, FLAGSStderrthreshold) {
  builder.addFieldInt32(4, FLAGSStderrthreshold, 3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} FLAGSAlsologtostderr
 */
testapp.Glog.addFLAGSAlsologtostderr = function(builder, FLAGSAlsologtostderr) {
  builder.addFieldInt32(5, FLAGSAlsologtostderr, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} FLAGSVmoduleOffset
 */
testapp.Glog.addFLAGSVmodule = function(builder, FLAGSVmoduleOffset) {
  builder.addFieldOffset(6, FLAGSVmoduleOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
testapp.Glog.endGlog = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} FLAGSV
 * @param {number} FLAGSMaxLogSize
 * @param {number} FLAGSLogtostderr
 * @param {number} FLAGSLogbuflevel
 * @param {number} FLAGSStderrthreshold
 * @param {number} FLAGSAlsologtostderr
 * @param {flatbuffers.Offset} FLAGSVmoduleOffset
 * @returns {flatbuffers.Offset}
 */
testapp.Glog.createGlog = function(builder, FLAGSV, FLAGSMaxLogSize, FLAGSLogtostderr, FLAGSLogbuflevel, FLAGSStderrthreshold, FLAGSAlsologtostderr, FLAGSVmoduleOffset) {
  testapp.Glog.startGlog(builder);
  testapp.Glog.addFLAGSV(builder, FLAGSV);
  testapp.Glog.addFLAGSMaxLogSize(builder, FLAGSMaxLogSize);
  testapp.Glog.addFLAGSLogtostderr(builder, FLAGSLogtostderr);
  testapp.Glog.addFLAGSLogbuflevel(builder, FLAGSLogbuflevel);
  testapp.Glog.addFLAGSStderrthreshold(builder, FLAGSStderrthreshold);
  testapp.Glog.addFLAGSAlsologtostderr(builder, FLAGSAlsologtostderr);
  testapp.Glog.addFLAGSVmodule(builder, FLAGSVmoduleOffset);
  return testapp.Glog.endGlog(builder);
}

/**
 * @constructor
 */
testapp.Config = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {testapp.Config}
 */
testapp.Config.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {testapp.Config=} obj
 * @returns {testapp.Config}
 */
testapp.Config.getRootAsConfig = function(bb, obj) {
  return (obj || new testapp.Config).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {testapp.DatabaseSettings=} obj
 * @returns {testapp.DatabaseSettings|null}
 */
testapp.Config.prototype.database = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new testapp.DatabaseSettings).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {testapp.DBConnection=} obj
 * @returns {testapp.DBConnection|null}
 */
testapp.Config.prototype.dbconnection = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new testapp.DBConnection).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {testapp.Glog=} obj
 * @returns {testapp.Glog|null}
 */
testapp.Config.prototype.glog = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? (obj || new testapp.Glog).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
testapp.Config.startConfig = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} databaseOffset
 */
testapp.Config.addDatabase = function(builder, databaseOffset) {
  builder.addFieldOffset(0, databaseOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} dbconnectionOffset
 */
testapp.Config.addDbconnection = function(builder, dbconnectionOffset) {
  builder.addFieldOffset(1, dbconnectionOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} glogOffset
 */
testapp.Config.addGlog = function(builder, glogOffset) {
  builder.addFieldOffset(2, glogOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
testapp.Config.endConfig = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} databaseOffset
 * @param {flatbuffers.Offset} dbconnectionOffset
 * @param {flatbuffers.Offset} glogOffset
 * @returns {flatbuffers.Offset}
 */
testapp.Config.createConfig = function(builder, databaseOffset, dbconnectionOffset, glogOffset) {
  testapp.Config.startConfig(builder);
  testapp.Config.addDatabase(builder, databaseOffset);
  testapp.Config.addDbconnection(builder, dbconnectionOffset);
  testapp.Config.addGlog(builder, glogOffset);
  return testapp.Config.endConfig(builder);
}

/**
 * @constructor
 */
testapp.TestAppSettings = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {testapp.TestAppSettings}
 */
testapp.TestAppSettings.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {testapp.TestAppSettings=} obj
 * @returns {testapp.TestAppSettings}
 */
testapp.TestAppSettings.getRootAsTestAppSettings = function(bb, obj) {
  return (obj || new testapp.TestAppSettings).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
testapp.TestAppSettings.prototype.version = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @param {number} value
 * @returns {boolean}
 */
testapp.TestAppSettings.prototype.mutate_version = function(value) {
  var offset = this.bb.__offset(this.bb_pos, 4);

  if (offset === 0) {
    return false;
  }

  this.bb.writeUint32(this.bb_pos + offset, value);
  return true;
};

/**
 * @param {testapp.Config=} obj
 * @returns {testapp.Config|null}
 */
testapp.TestAppSettings.prototype.config = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new testapp.Config).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
testapp.TestAppSettings.startTestAppSettings = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} version
 */
testapp.TestAppSettings.addVersion = function(builder, version) {
  builder.addFieldInt32(0, version, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} configOffset
 */
testapp.TestAppSettings.addConfig = function(builder, configOffset) {
  builder.addFieldOffset(1, configOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
testapp.TestAppSettings.endTestAppSettings = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
testapp.TestAppSettings.finishTestAppSettingsBuffer = function(builder, offset) {
  builder.finish(offset);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} version
 * @param {flatbuffers.Offset} configOffset
 * @returns {flatbuffers.Offset}
 */
testapp.TestAppSettings.createTestAppSettings = function(builder, version, configOffset) {
  testapp.TestAppSettings.startTestAppSettings(builder);
  testapp.TestAppSettings.addVersion(builder, version);
  testapp.TestAppSettings.addConfig(builder, configOffset);
  return testapp.TestAppSettings.endTestAppSettings(builder);
}

// Exports for Node.js and RequireJS
this.testapp = testapp;
